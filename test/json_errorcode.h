/********************************************************************
**       This head file is generated by program,                   **
**            Please do not change it directly.                    **
**                   Auther: brinkqiang                            **
********************************************************************/

/*       Version Number: 1_0          */

#ifndef json_ERRORCODE_H_INCLUDE_VERSION_1_0
#define json_ERRORCODE_H_INCLUDE_VERSION_1_0

#include "dmformat.h"

#ifndef NSjson_BEGIN
#define NSjson_BEGIN
#endif

#ifndef NSjson_NAMESPACE
#define NSjson_NAMESPACE
#endif

#ifndef NSjson_END
#define NSjson_END
#endif

NSjson_BEGIN

enum EjsonErrorID
{
    FORMAT_ERR_OK                             = 0     , /// OK /// 操作成功错误码
    FORMAT_ERR_NG                             = 1     , /// NG /// 常规失败错误码
    FORMAT_ERR_NET_CONNECT                             = 1000     , /// host:{0} port:{1} connect failed.  /// 主机:{0} 端口:{1} 连接失败
};

template<EjsonErrorID ID> inline const char * GetjsonError();

inline const char * GetjsonError(){return "ERR_UNKNOWN";}

template<> inline const char * GetjsonError<FORMAT_ERR_OK>(){return "OK";}
template<> inline const char * GetjsonError<FORMAT_ERR_NG>(){return "NG";}
template<> inline const char * GetjsonError<FORMAT_ERR_NET_CONNECT>(){return "host:{0} port:{1} connect failed. ";}

inline const char* GetjsonError(int nError)
{
    switch(nError)
    {
    case FORMAT_ERR_OK: return GetjsonError<FORMAT_ERR_OK>();
    case FORMAT_ERR_NG: return GetjsonError<FORMAT_ERR_NG>();
    case FORMAT_ERR_NET_CONNECT: return GetjsonError<FORMAT_ERR_NET_CONNECT>();
    default: break;
    }
    return GetjsonError();
}

inline std::string FormatjsonError(int nError)
{
    const char* pError = GetjsonError(nError);
    if (GetjsonError() == pError){return fmt::format("{0} code={1} params=[]", GetjsonError(), nError);}
    return fmt::format(GetjsonError(nError));
}

template<class V0>
inline std::string FormatjsonError(int nError, const V0& p0)
{
    const char* pError = GetjsonError(nError);
    if (GetjsonError() == pError){return fmt::format("{0} code={1} params=[{2}]", GetjsonError(), nError, p0);}
    return fmt::format(GetjsonError(nError),p0);
}

template<class V0, class V1>
inline std::string FormatjsonError(int nError, const V0& p0, const V1& p1)
{
    const char* pError = GetjsonError(nError);
    if (GetjsonError() == pError) {return fmt::format("{0} code={1} params=[{2},{3}]", GetjsonError(), nError, p0,p1); }
    return fmt::format(GetjsonError(nError),p0,p1);
}

template<class V0, class V1, class V2>
inline std::string FormatjsonError(int nError, const V0& p0, const V1& p1, const V2& p2)
{
    const char* pError = GetjsonError(nError);
    if (GetjsonError() == pError) {return fmt::format("{0} code={1} params=[{2},{3},{4}]", GetjsonError(), nError, p0,p1,p2); }
    return fmt::format(GetjsonError(nError),p0,p1,p2);
}

template<class V0, class V1, class V2, class V3>
inline std::string FormatjsonError(int nError, const V0& p0, const V1& p1, const V2& p2, const V3& p3)
{
    const char* pError = GetjsonError(nError);
    if (GetjsonError() == pError) {return fmt::format("{0} code={1} params=[{2},{3},{4},{5}]", GetjsonError(), nError, p0,p1,p2,p3); }
    return fmt::format(GetjsonError(nError),p0,p1,p2,p3);
}

template<class V0, class V1, class V2, class V3, class V4>
inline std::string FormatjsonError(int nError, const V0& p0, const V1& p1, const V2& p2, const V3& p3, const V4& p4)
{
    const char* pError = GetjsonError(nError);
    if (GetjsonError() == pError) {return fmt::format("{0} code={1} params=[{2},{3},{4},{5},{6}]", GetjsonError(), nError, p0,p1,p2,p3,p4); }
    return fmt::format(GetjsonError(nError),p0,p1,p2,p3,p4);
}

template<class V0, class V1, class V2, class V3, class V4, class V5>
inline std::string FormatjsonError(int nError, const V0& p0, const V1& p1, const V2& p2, const V3& p3, const V4& p4, const V5& p5)
{
    const char* pError = GetjsonError(nError);
    if (GetjsonError() == pError) {return fmt::format("{0} code={1} params=[{2},{3},{4},{5},{6},{7}]", GetjsonError(), nError, p0,p1,p2,p3,p4,p5); }
    return fmt::format(GetjsonError(nError),p0,p1,p2,p3,p4,p5);
}

template<class V0, class V1, class V2, class V3, class V4, class V5, class V6>
inline std::string FormatjsonError(int nError, const V0& p0, const V1& p1, const V2& p2, const V3& p3, const V4& p4, const V5& p5, const V6& p6)
{
    const char* pError = GetjsonError(nError);
    if (GetjsonError() == pError) {return fmt::format("{0} code={1} params=[{2},{3},{4},{5},{6},{7},{8}]", GetjsonError(), nError, p0,p1,p2,p3,p4,p5,p6); }
    return fmt::format(GetjsonError(nError),p0,p1,p2,p3,p4,p5,p6);
}

template<class V0, class V1, class V2, class V3, class V4, class V5, class V6, class V7>
inline std::string FormatjsonError(int nError, const V0& p0, const V1& p1, const V2& p2, const V3& p3, const V4& p4, const V5& p5, const V6& p6, const V7& p7)
{
    const char* pError = GetjsonError(nError);
    if (GetjsonError() == pError) {return fmt::format("{0} code={1} params=[{2},{3},{4},{5},{6},{7},{8},{9}]", GetjsonError(), nError, p0,p1,p2,p3,p4,p5,p6,p7); }
    return fmt::format(GetjsonError(nError),p0,p1,p2,p3,p4,p5,p6,p7);
}

template<class V0, class V1, class V2, class V3, class V4, class V5, class V6, class V7, class V8>
inline std::string FormatjsonError(int nError, const V0& p0, const V1& p1, const V2& p2, const V3& p3, const V4& p4, const V5& p5, const V6& p6, const V7& p7, const V8& p8)
{
    const char* pError = GetjsonError(nError);
    if (GetjsonError() == pError) {return fmt::format("{0} code={1} params=[{2},{3},{4},{5},{6},{7},{8},{9},{10}]", GetjsonError(), nError, p0,p1,p2,p3,p4,p5,p6,p7,p8); }
    return fmt::format(GetjsonError(nError),p0,p1,p2,p3,p4,p5,p6,p7,p8);
}

template<class V0, class V1, class V2, class V3, class V4, class V5, class V6, class V7, class V8, class V9>
inline std::string FormatjsonError(int nError, const V0& p0, const V1& p1, const V2& p2, const V3& p3, const V4& p4, const V5& p5, const V6& p6, const V7& p7, const V8& p8, const V9& p9)
{
    const char* pError = GetjsonError(nError);
    if (GetjsonError() == pError) {return fmt::format("{0} code={1} params=[{2},{3},{4},{5},{6},{7},{8},{9},{10},{11}]", GetjsonError(), nError, p0,p1,p2,p3,p4,p5,p6,p7,p8,p9); }
    return fmt::format(GetjsonError(nError),p0,p1,p2,p3,p4,p5,p6,p7,p8,p9);
}

NSjson_END
#endif
